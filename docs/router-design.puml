@startuml
abstract class History {
  +abstract pushState(state: any, title: string, url: string): void
  +abstract replaceState(state: any, title: string, url: string): void
  +abstract go(n: number): void
  +abstract back(): void
  +abstract forward(): void
}

abstract class Navigator {
  +abstract navigate(to: Route, from: Route): void
}

interface Adapter {
  +createHistory(): History
  +createNavigator(): Navigator
}

class WebHistory extends History {
  +pushState(state: any, title: string, url: string): void
  +replaceState(state: any, title: string, url: string): void
  +go(n: number): void
  +back(): void
  +forward(): void
}

class WebNavigator extends Navigator {
  +navigate(to: Route, from: Route): void
}

class UniappHistory extends History {
  +pushState(state: any, title: string, url: string): void
  +replaceState(state: any, title: string, url: string): void
  +go(n: number): void
  +back(): void
  +forward(): void
}

class UniappNavigator extends Navigator {
  +navigate(to: Route, from: Route): void
}

class WebAdapter implements Adapter {
  +createHistory(): History
  +createNavigator(): Navigator
}

class UniappAdapter implements Adapter {
  +createHistory(): History
  +createNavigator(): Navigator
}

class Route {
  +path: string
  +component: any
  +beforeEnter?: (to: Route, from: Route, next: Function) => void
}

class Router {
  -routes: Route[]
  -history: History
  -navigator: Navigator
  +constructor(adapter: Adapter)
  +push(path: string, params?: any): void
  +replace(path: string, params?: any): void
  +go(n: number): void
  +back(): void
  +forward(): void
}

Router --> History
Router --> Navigator
Router --> Route

WebAdapter --> WebHistory
WebAdapter --> WebNavigator

UniappAdapter --> UniappHistory
UniappAdapter --> UniappNavigator

@enduml
